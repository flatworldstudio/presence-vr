// CLIENT STORIES.

#presenceclient
debugoff
amvrclient
moodon
start moodlight
start serversearch
alignset
calibrateheadset
addkinectnull
createuser
//receivelivedepth
start simulate
end

#simulate
createSimulateUX
headsetSimulate
end


// Serversearch waits for server and launches #foundserver.

#serversearch
startdiscover
listenforserver
end

// Foundserver starts a client and monitors the connection. If connection is lost it launches #serverlost.

#foundserver
startclient
moodon
monitorconnection
end

// Serverlost responds to losing connection and then launches (back into) #serversearch.

#serverlost
moodoff
stop userstreaming
stop clientcalibration
lostconnection
start serversearch
end

// SERVER STORIES.



#presenceserver
debugoff
amserver
//writefile
//readfile
//end
start server
displaycheck
alignset
addkinectnull
createuser
moodon
makeservercontrols
setflow_guided
setfiledefaults
makefoldermenu
makefilemenu
start servercontrols
start keyboardcontrols
start moodlight
end

#toggleviews
toggleview
end

#toggleinfo
isglobal
toggledebug
pause1
end

// Server starts server and waits and calls #newclient when a client connects.

#server
startserver
listenforclients
end

// Newclient. Passglobal reviews all storypointers and marks the global ones as modified so they get pushed to clients.

#newclient
passglobal
end

// Servercontrols handles server UI.

#servercontrols
servercontrol
end

// Server io

#togglebrowser
togglebrowser
end

#folder
setfolder
makefilemenu
end

#file
setfile
end

#newfile
makenewfile
savenewfile
makefilemenu
end

#newfolder
makenewfolder
makefoldermenu
makefilemenu
end


// Startpresence starts the kinect (if possible) and begins streaming user info 

#startpresence
isglobal
depthlive
start userstreaming
pause3
end


// Stoppresence stops the kinect if needed and stops userstreaming.

#stoppresence
isglobal
depthoff
stop startpresence
stop userstreaming
pause3
end

// Presencehandler handles presence playback and mirrors everything to the client.

#presencehandler
isglobal
@handler
handlepresences
end

// Keyboard controls

#keyboardcontrols
keyboardcontrol
end

#grabframe
grabframe
end

#nextframe
nextframe
end

#previousframe
previousframe
end

#togglemanualplayback
togglemanualplayback
end

// Headset calibration

#calibratenow
isglobal
calibrateheadset
end

// Flows - guided

#flow_guided
setflow_guided
end

#preloader
loadfile
pause1
end


#recordguided
pressedrecordstart
isglobal
ResetGuided
start presencehandler
preloadfile
waitforuser
start recording
MaterialiseOn
pause5
goto circlescene
GuideOpening
pause5
OffsetReset
start recording
GuideSitdown
WaitforSeated
GuideBegin
MaterialiseOn
GuideObservehands
pause5
// DRAWING SCENE
@drawingscene
TimeStamp_BeginDraw
DrawingOn
GuideDrawing
@drawingplayback
pause1
start PlayDrawings
pause10
GuideObservedrawing
pause30
TimeStamp_EndDraw
DrawingOff
start EndDrawings
GuideGetup
WaitforGetup
GuideThirdpersonintro
DrawingRemove
OffsetThirdperson
GuideThirdperson
pause5
//GuideThirdpersonexit
pause5
GuideReturntocenter
WaitForFacekinect
OffsetReset
pause5
// MIRROR SCENE
@mirrorscene
GuideMirrorintro
pause5
DelayOn
GuideMirror
pause5
DelaySlow
GuideSlowdown
pause5
DelayReverse
GuideReverse
pause5
DelayStop
GuideFreeze
pause5
deletepresences
start Shatter
GuideShatter
pause15
stop Shatter
deletepresences
// CIRCLE SCENE
@circlescene
ShowCircle
GuideCircleintro
GuideCircle
WaitForCircleStart
TimeStamp_BeginCircle
WaitForCircleOneThird
AddCircleClone
GuideCircleclone
WaitForCircleTwoThird
AddCircleClone
GuideCircleclone
WaitForCircleThreeThird
AddCircleClone
TimeStamp_EndCircle
HideCircle
GuideCircleobserve
pause15
endcirclescene
// PRESENCE SCENE
@presencescene
pause1
start RandomPresences
GuideNotalone
pause10
GuidePresences
pause15
pause10
GuideEndpresences
pause1
stop RandomPresences
WaitforSeated
@recordguided_stop
pressedrecordstop
stop recording
//recordstop
recordoff
storefileasync
MaterialiseOff
deletepresences
pause3
stop RandomPresences
stop PlayDrawings
stop Shatter
stop presencehandler
GuideEndsession
makefilemenu
end



#Shatter
ShatterUser
end

//#RandomPresences
//SpawnPresences
//end

#RandomPresences
pause1
@loadnextpresence
nextfile
loadfile
randomdelay
playbackpresence
goto loadnextpresence


#stoprecordguided
tell recordguided recordguided_stop
end

#playguided
pressedplay
pause5
@playguided_stop
pressedstop
pause1
end

#stopplayguided
tell playguided playguided_stop
end


// IsRecording stays active so it can time out the session if need be.
#recording
recordprepare
IsRecording
end


// Playback of drawing sequences. 

#PlayDrawings
pause1
@loadnextdrawing
nextfile
loadfile
randomdelay
playbackdrawing
goto loadnextdrawing

#EndDrawings
stopdrawing
stop PlayDrawings
pause1
end


// Flows - solo

#flow_solo
setflow_solo
end

// note. calling recordprepare to create empty buffer. presencehandler will otherwise first try to load from disk.

#recordsolo
pressedrecordstart
isglobal
recordprepare
waitforuser
materialiseon
start presencehandler
IsRecording
@recordsolo_stop
pressedrecordstop
recordoff
materialiseoff
storefileasync
stop presencehandler
makefilemenu
pause1
end

#stoprecordsolo
tell recordsolo recordsolo_stop
end

#playsolo
pressedplay
isglobal
start presencehandler
loadfileasync
playbackfile
waitforallplaybacktoend
@playsolo_stop
deletepresences
pressedstop
stop presencehandler
pause1
end

#stopplaysolo
tell playsolo playsolo_stop
end


// Flows - cumulative. Playback and record both play back the previous 2 files.

#flow_echo
setflow_echo
end

#recordecho
isglobal
start presencehandler
//moodoff
materialiseoff
recordprepare
waitforuser
autocalibrate
//moodon
pause3
waitforgesture
materialiseon
playecho
recordstart
@recordecho_stop
recordstop
materialiseoff
deletepresences
makefilemenu
end

#stoprecordecho
tell recordecho recordecho_stop
end

// Play back cumulatively.

#playecho
pressedplay
playbackfile
playecho
start presencehandler
waitforallplaybacktoend
pause5
@playecho_stop
deletepresences
pressedstop
end

#stopplayecho
tell playecho playecho_stop
end

// Flows - mirror. Shows a mirrored copy in realtime.

#flow_mirror
setflow_mirror
end

#playmirror
pressedplay
playbackfile
playmirror
start presencehandler
waitforallplaybacktoend
pause5
@playmirror_stop
deletepresences
pressedstop
end

#stopplaymirror
tell playmirror playmirror_stop
end

// Flows - delay. Shows a number of duplicates, in RT, with a delay.

#flow_delay
setflow_delay
end

#playdelay
pressedplay
playbackfile
playdelay
start presencehandler
waitforallplaybacktoend
pause5
@playdelay_stop
deletepresences
pressedstop
end

#stopplaydelay
tell playdelay playdelay_stop
end


// GENERAL STORIES

// Moodlight controls ambient lighting. It runs either locally or globally with the server controlling the lights.

#moodlight
isglobal
moodlight
end

// Userstreaming streams users head and hands to client and streams back head rotation.

#userstreaming
isglobal
userstream
end



#void
void
end