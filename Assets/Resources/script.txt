// CLIENT STORIES.

#presenceclient
debugoff
amvrclient
start moodlight
start serversearch
alignset
calibrateheadset
addkinectnull
createuser
receivelivedepth
end

// Serversearch waits for server and launches #foundserver.

#serversearch
startdiscover
listenforserver
end

// Foundserver starts a client and monitors the connection. If connection is lost it launches #serverlost.

#foundserver
startclient
moodon
monitorconnection
end

// Serverlost responds to losing connection and then launches (back into) #serversearch.

#serverlost
moodoff
stop userstreaming
stop clientcalibration
lostconnection
start serversearch
end

// SERVER STORIES.

#presenceserver
debugon
amserver
start server
displaycheck
alignset
addkinectnull
createuser
moodon
makeservercontrols
setflow_solo
setfiledefaults
makefoldermenu
makefilemenu
start servercontrols
start keyboardcontrols
start moodlight
end

#screentap
toggleview
end


// Server starts server and waits and calls #newclient when a client connects.

#server
startserver
listenforclients
end

// Newclient. Passglobal reviews all storypointers and marks the global ones as modified so they get pushed to clients.

#newclient
passglobal
end

// Servercontrols handles server UI.

#servercontrols
servercontrol
end

// Server io

#togglebrowser
togglebrowser
end

#folder
setfolder
makefilemenu
end

#file
setfile
end

#newfile
makenewfile
makefilemenu
end

#newfolder
makenewfolder
makefoldermenu
makefilemenu
end


// Startpresence starts the kinect (if possible) and begins streaming user info 

#startpresence
depthlive
start userstreaming
end


// Stoppresence stops the kinect if needed and stops userstreaming.

#stoppresence
depthoff
stop startpresence
stop userstreaming
end

// Presencehandler handles presence playback and mirrors everything to the client.

#presencehandler
isglobal
handlepresences
end

// Keyboard controls

#keyboardcontrols
keyboardcontrol
end

#grabframe
grabframe
end

#nextframe
nextframe
end

#previousframe
previousframe
end

#togglemanualplayback
togglemanualplayback
end

// Headset calibration

#calibratenow
isglobal
calibrateheadset
end

// Flows - guided

#flow_guided
setflow_guided
end

#playguided
pressedplay
OffsetReset
isglobal
start presencehandler
pause5
GuideOpening
pause5
OffsetReset
GuideSitdown
WaitforSeated
GuideBegin
WaitforRaisedhands
MaterialiseOn
GuideObservehands
pause5
DrawingOn
GuideDrawing
pause5
DrawingOff
GuideObservedrawing
pause5
GuideGetup
WaitforGetup
GuideThirdpersonintro
DrawingRemove
OffsetThirdperson
GuideThirdperson
pause5
GuideThirdpersonexit
pause5
GuideReturntocenter
WaitForCentered
OffsetReset
pause5
GuideMirrorintro
pause5
GuideMirror
pause5
GuideSlowdown
pause5
GuideReverse
pause5
GuideFreeze
pause5
GuideShatter
pause5
GuideCircleintro
pause5
GuideCircle
pause5
GuideCircleclone
pause5
GuideCircleobserve
pause5
GuideNotalone
pause5
GuidePresences
pause5
GuideEndpresences
pause5
GuideEndsession
pause5

@playguided_stop
pressedstop
stop presencehandler
pause5
end

#stopplayguided
tell playguided playguided_stop
end

#recordguided
pause5
@recordguided_stop
pause5
end

#stoprecordguided
tell recordguided_stop
end


// Flows - solo

#flow_solo
setflow_solo
end

#recordsolo
pressedrecordstart
isglobal
//moodoff
materialiseoff
recordprepare
waitforuser
autocalibrate
//moodon
pause3
waitforgesture
materialiseon
recordstart
@recordsolo_stop
pressedrecordstop
recordstop
materialiseoff
makefilemenu
end

#stoprecordsolo
tell recordsolo recordsolo_stop
end

#playsolo
pressedplay
playbackfile
start presencehandler
waitforallplaybacktoend
pause5
@playsolo_stop
deletepresences
pressedstop
end

#stopplaysolo
tell playsolo playsolo_stop
end


// Flows - cumulative. Playback and record both play back the previous 2 files.

#flow_echo
setflow_echo
end

#recordecho
isglobal
start presencehandler
//moodoff
materialiseoff
recordprepare
waitforuser
autocalibrate
//moodon
pause3
waitforgesture
materialiseon
playecho
recordstart
@recordecho_stop
recordstop
materialiseoff
deletepresences
makefilemenu
end

#stoprecordecho
tell recordecho recordecho_stop
end

// Play back cumulatively.

#playecho
pressedplay
playbackfile
playecho
start presencehandler
waitforallplaybacktoend
pause5
@playecho_stop
deletepresences
pressedstop
end

#stopplayecho
tell playecho playecho_stop
end

// Flows - mirror. Shows a mirrored copy in realtime.

#flow_mirror
setflow_mirror
end

#playmirror
pressedplay
playbackfile
playmirror
start presencehandler
waitforallplaybacktoend
pause5
@playmirror_stop
deletepresences
pressedstop
end

#stopplaymirror
tell playmirror playmirror_stop
end

// Flows - delay. Shows a number of duplicates, in RT, with a delay.

#flow_delay
setflow_delay
end

#playdelay
pressedplay
playbackfile
playdelay
start presencehandler
waitforallplaybacktoend
pause5
@playdelay_stop
deletepresences
pressedstop
end

#stopplaydelay
tell playdelay playdelay_stop
end


// GENERAL STORIES

// Moodlight controls ambient lighting. It runs either locally or globally with the server controlling the lights.

#moodlight
isglobal
moodlight
end

// Userstreaming streams users head and hands to client and streams back head rotation.

#userstreaming
isglobal
userstream
end



